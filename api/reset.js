const express = require("express");
const router = express.Router();
// package for mailing
const nodemailer = require("nodemailer");
const User = require("../models/user/User");
const Business = require("../models/business/Business");
const async = require("async");
const crypto = require("crypto");
const bcrypt = require("bcryptjs");

// @route    POST reset/forget
// @desc     Create a new password
// @access   public
router.post("/forget", function (req, res, next) {
  // let host = "http://34.71.166.221:5000"
  let host = "https://business-startup-api.herokuapp.com";
  let email = req.body.email;
  async.waterfall(
    [
      function (done) {
        crypto.randomBytes(20, function (err, buf) {
          var token = buf.toString("hex");
          done(err, token);
        });
      },
      function (token, done) {
        User.findOne({ email: req.body.email }, function (err, user) {
          if (!user) {
            console.log("No email in user search");
            console.log("searching business");
            // search business if they have business email
            Business.findOne({ email: req.body.email }, function (
              err,
              business
            ) {
              if (!business) {
                console.log("No email in business search");
                return res.send("nope");
              } else {
                console.log("found email in business db");
                business.resetPasswordToken = token;
                business.resetPasswordExpires = Date.now() + 3600000; // 1 hour
                business.save(function (err) {
                  done(err, token, business);
                  console.log(business);
                });
                return res.send("sent");
              }
            });
            // return res.send("nope");
          } else {
            user.resetPasswordToken = token;
            user.resetPasswordExpires = Date.now() + 3600000; // 1 hour
            user.save(function (err) {
              done(err, token, user);
              console.log(user);
              res.send("sent");
            });
          }
        });
      },

      function (token, user, done) {
        console.log("send an email ");
        console.log(user.email);
        var transporter = nodemailer.createTransport({
          service: "gmail",
          host: "smtp.gmail.com",
          auth: {
            user: "codeandgym@gmail.com", //generated by Mailtrap
            pass: "CODEandgym@1", //generated by Mailtrap
          },
        });
        var mailOptions = {
          to: user.email,
          from: "passwordreset@demo.com",
          subject: "Node.js Password Reset",
          text:
            "You are receiving this because you (or someone else) have requested the reset of the password for your account.\n\n" +
            "Please click on the following link, or paste this into your browser to complete the process:\n\n" +
            host +
            "/reset/" +
            token +
            "\n\n" +
            "If you did not request this, please ignore this email and your password will remain unchanged.\n",
        };
        transporter.sendMail(mailOptions, function (err) {
          req.flash(
            "info",
            "An e-mail has been sent to " +
              user.email +
              " with further instructions."
          );
          done(err, "done");
        });
      },
    ],
    function (err) {
      if (err) return next(err);
    }
  );
});

// password change
router.post("/:token", function (req, res) {
  console.log("we posted the password");
  console.log(req.params.token);
  console.log(req.body.password);
  var password = req.body.password;
  async.waterfall(
    [
      async function (done) {
        await User.findOne(
          {
            resetPasswordToken: req.params.token,
            resetPasswordExpires: { $gt: Date.now() },
          },
          async function (err, user) {
            if (!user) {
              // req.flash('error', 'Password reset token is invalid or has expired.');
              console.log("token is expired");
              return res.json("token expired");
            }

            // Hash the password
            const salt = await bcrypt.genSalt(10);
            user.password = password;
            user.password = await bcrypt.hash(password, salt);

            user.resetPasswordToken = undefined;
            user.resetPasswordExpires = undefined;
            console.log(user);
            user.save(function (err) {
              console.log(err);
            });
            res.json("success");
          }
        );
      },
    ],
    function (err) {
      console.log(err);
    }
  );
});

module.exports = router;
